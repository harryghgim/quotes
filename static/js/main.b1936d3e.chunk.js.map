{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","text","author","idx","getNewQuote","bind","max","quotes","length","Math","floor","random","this","setState","className","id","onClick","href","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"64GAgDeA,E,kDA3Cb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNC,OAAQ,GACRC,IAAK,IAEP,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAPF,E,+CAUnB,WAEE,IAAMC,EAAMC,EAAOC,OACbL,EAAMM,KAAKC,MAAOD,KAAKE,SAAWL,GAClCL,EAAOM,EAAOJ,GAAKF,KACnBC,EAASK,EAAOJ,GAAKD,OAC3BU,KAAKC,UAAS,SAAAb,GAAK,MAAK,CACtBG,IAAKA,EACLD,OAAQA,EACRD,KAAMA,Q,oBAKV,WACE,OACE,qBAAKa,UAAU,MAAf,SACE,sBAAKC,GAAG,YAAR,UACE,mBAAGD,UAAU,YAAYC,GAAG,OAA5B,SAAoCH,KAAKZ,MAAMC,OAC/C,mBAAGc,GAAG,SAAN,SAAgBH,KAAKZ,MAAME,SAC3B,gCACE,wBAAQY,UAAU,oBAAoBE,QAASJ,KAAKR,YAAaW,GAAG,YAApE,uBACA,mBAAGA,GAAG,cAAcE,KAAK,mCAAzB,SACE,wBAAQH,UAAU,eAAlB,4BANmBF,KAAKZ,MAAMG,W,GA5B1Be,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,YCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b1936d3e.chunk.js","sourcesContent":["import './App.css';\nimport { Component } from 'react';\nimport quotes from './quotes'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      text: '',\n      author: '',\n      idx: '' \n    };\n    this.getNewQuote = this.getNewQuote.bind(this)\n  }\n\n  getNewQuote() {\n\n    const max = quotes.length\n    const idx = Math.floor( Math.random() * max )\n    const text = quotes[idx].text\n    const author = quotes[idx].author\n    this.setState(state => ({\n      idx: idx,\n      author: author,\n      text: text\n    }))\n\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"quote-box\" key={this.state.idx}>\n          <p className=\"container\" id=\"text\">{this.state.text}</p>\n          <p id=\"author\">{this.state.author}</p>\n          <div>\n            <button className=\"btn btn-dark me-2\" onClick={this.getNewQuote} id=\"new-quote\">new quote</button> \n            <a id=\"tweet-quote\" href=\"https://twitter.com/intent/tweet\">\n              <button className=\"btn btn-dark\">twitter</button>\n            </a>\n          </div>\n        </div>          \n      </div>\n      );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}